name: Deploy to AWS 

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: 🏗️ Build Spring Boot JAR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Build with Maven
        run: chmod +x ./mvnw && ./mvnw clean package -DskipTests

      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: springboot-jar
          path: target/*.jar

  deploy:
    name: 🚀 Deploy to UAT Server
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: springboot-jar
          path: ./deploy

      - name: Setup SSH key
        run: |
          echo "${{ secrets.SERVER_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Copy JAR to server
        run: |
          echo "Transferring JAR to server..."
          scp -i key.pem -o StrictHostKeyChecking=no ./deploy/*.jar \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USER }}/app/temp_myapp.jar

      - name: Deploy and restart service
        run: |
          echo "Deploying to UAT..."
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e
            echo "Stopping existing service..."
            sudo systemctl stop myapp || true

            echo "Backing up old JAR if present..."
            if [ -f /home/${USER}/app/myapp.jar ]; then
              mv /home/${USER}/app/myapp.jar /home/${USER}/app/application-$(date +'%Y%m%d%H%M').bak
            fi

            echo "Moving new JAR..."
            mv /home/${USER}/app/temp_myapp.jar /home/${USER}/app/myapp.jar

            echo "Starting service..."
            sudo systemctl daemon-reload
            sudo systemctl start myapp

            echo "Waiting for app to start..."
            for i in {1..6}; do
              status=$(systemctl is-active myapp)
              if [ "$status" = "active" ]; then
                echo "✅ myapp started successfully!"
                break
              fi
              echo "⏳ Waiting..."
              sleep 5
            done

            echo "Final status:"
            sudo systemctl status myapp --no-pager || true
          EOF
